# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  dotnetVersion: '3.1.x'
  #package variables
  packageAppManifestPath: "$(System.DefaultWorkingDirectory)/src/MSIXPackage/Package.appxmanifest"
  major: 1
  minor: 0
  build: 3
  revision: $[counter('rev', 0)]
  packageIdentityName: 'swdriessen-msix-package'
  packageDisplayName: 'MSIX Application'
  packageVersion: '1.0.2.$(revision)'
  packageUrl: 'https://downloads.swdriessen.nl/msix'
  #certificate
  certificateName: 'MSIXPackage_TemporaryKey.pfx'


#release channels (dev/preview/production)
jobs: 
- job: 'Package MSIX'
  strategy:
    matrix: 
      Preview:
        channelName: 'preview'
        packageIdentitySuffix: '-preview'
        packageDisplayNameSuffix: ' [PREVIEW]'
      Production:
        channelName: 'production'
        packageIdentitySuffix: ''
        packageDisplayNameSuffix: ''

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core $(dotnetVersion)'
  inputs:
    version: '$(dotnetVersion)'
    performMultiLevelLookup: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    
- task: DownloadSecureFile@1
  name: signingCert
  inputs:
    secureFile: '$(certificateName)'
  displayName: 'Download Certificate'

- task: PowerShell@2
  displayName: 'Update Package Manifest'
  inputs:
    targetType: 'inline'
    script: |
    [xml]$manifest= get-content "$(packageAppManifestPath)"
    $manifest.Package.Identity.Name = "$(packageIdentityName)$(packageIdentitySuffix)"
    $manifest.Package.Identity.Version = "$(packageVersion)"
    $manifest.Package.Properties.DisplayName = "$(packageDisplayName)$(packageDisplayNameSuffix)"
    $manifest.Package.Applications.Application.VisualElements.DisplayName = "$(packageDisplayName)$(packageDisplayNameSuffix)"
    $manifest.save("$(packageAppManifestPath)")

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)    
    msbuildArgs: '/restore 
    /p:AppInstallerUri=$(packageUrl)/$(channelName) 
    /p:AppxPackageDir=$(Build.ArtifactStagingDirectory)/$(channelName) 
    /p:UapAppxPackageBuildMode=SideLoadOnly 
    /p:GenerateAppInstallerFile=True
    /p:AppInstallerCheckForUpdateFrequency=OnApplicationRun
    /p:AppInstallerUpdateFrequency=1
    /p:AppxBundle=Never'
    #/p:OutputPath=NonPackagedApp
    #/p:AppxPackageSigningEnabled=false
    #/p:PackageCertificateThumbprint="444EAE8EF9A571539D03E3A37D76A780F504171B" 
    #/p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"
    #/p:PackageCertificatePassword="$(secret)"

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*.Tests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

#copy app packages content
- task: CopyFiles@2
  displayName: 'Copy Files to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
