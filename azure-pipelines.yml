# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  dotNetCoreVersion: '3.1.x'
  certificateName: 'MSIXPackage_TemporaryKey.pfx'
  major: 1
  minor: 0
  build: 0
  revision: $[counter('rev', 0)]

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK $(dotNetCoreVersion)'
  inputs:
    version: '$(dotNetCoreVersion)'
    performMultiLevelLookup: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*.Tests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

#auto increment revision version

- powershell: |
   [Reflection.Assembly]::LoadWithPartialName("System.Xml.Linq") | Out-Null
   $path = "**/MSIXPackage/Package.appxmanifest"
   $doc = [System.Xml.Linq.XDocument]::Load($path)
   $xName = "{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity"
   $doc.Root.Element($xName).Attribute("Version").Value = "$(major).$(minor).$(build).$(revision)";
   $doc.Save($path)
  displayName: 'Increment Package Manifest Revision '

# build package
- task: MSBuild@1
  inputs:
    solution: '$(System.DefaultWorkingDirectory)/MSIXPackage/MSIXPackage.wapproj'
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
    msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MSIXPackage.msix /p:AppxPackageSigningEnabled=false'
  displayName: 'Package the App'

# sign package
- task: DownloadSecureFile@1
  inputs:
    secureFile: '$(certificateName)'
  displayName: 'Download Secure PFX File'

- script: 'signtool sign /fd SHA256 /f $(Agent.TempDirectory)/$(certificateName) /p secret $(Build.ArtifactStagingDirectory)/MSIXPackage.msix'
  displayName: 'Sign MSIX Package'

#copy app packages content
- task: CopyFiles@2
  displayName: 'Copy Files to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
