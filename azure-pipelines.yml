# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  dotnetVersion: '3.1.x'
  certificateName: 'MSIXPackage_TemporaryKey.pfx'
  major: 1
  minor: 0
  build: 0
  revision: $[counter('rev', 0)]
  packageName: 'MSIX Package Sample'
  packageUrl: https://downloads.swdriessen.nl/msix

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK $(dotnetVersion)'
  inputs:
    version: '$(dotnetVersion)'
    performMultiLevelLookup: true

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

#- task: VSBuild@1
#  inputs:
#    solution: '$(solution)'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- task: VSTest@2
#  inputs:
#    testSelector: 'testAssemblies'
#    testAssemblyVer2: |
#      **\*.Tests.dll
#      !**\*TestAdapter.dll
#      !**\obj\**
#    searchFolder: '$(System.DefaultWorkingDirectory)'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#auto increment revision version

- powershell: |
   [Reflection.Assembly]::LoadWithPartialName("System.Xml.Linq") | Out-Null
   $path = "$(System.DefaultWorkingDirectory)/src/MSIXPackage/Package.appxmanifest"
   $doc = [System.Xml.Linq.XDocument]::Load($path)
   $xName = "{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity"
   $doc.Root.Element($xName).Attribute("Version").Value = "$(major).$(minor).$(build).$(revision)";
   $doc.Save($path)
  displayName: 'Increment Package Manifest Revision'

# build package
- task: MSBuild@1
  inputs:
    solution: '$(System.DefaultWorkingDirectory)/src/MSIXPackage/MSIXPackage.wapproj'
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)
    # msbuildArguments: '/p:OutputPath=NonPackagedApp /p:UapAppxPackageBuildMode=SideLoadOnly 
    # /p:AppxBundle=Never /p:AppxPackageOutput=$(Build.ArtifactStagingDirectory)\MSIXPackage.msix /p:AppxPackageSigningEnabled=false'

    # msbuildArguments: '/p:AppxBundlePlatforms="$(buildPlatform)" 
    #               /p:AppxPackageDir="$(appxPackageDir)" 
    #               /p:AppxBundle=Never 
    #               p:UapAppxPackageBuildMode=SideLoadOnly 
    #               /p:AppxPackageSigningEnabled=true
    #               /p:PackageCertificateThumbprint="" 
    #               /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'

    msbuildArguments: '/p:OutputPath=NonPackagedApp 
    /p:UapAppxPackageBuildMode=SideLoadOnly  
    /p:AppxBundle=Never 
    /p:GenerateAppInstallerFile=True
    /p:AppInstallerUri=https://downloads.swdriessen.nl/msix
    /p:AppInstallerCheckForUpdateFrequency=OnApplicationRun 
    /p:AppInstallerUpdateFrequency=1 
    /p:AppxPackageDir=$(Build.ArtifactStagingDirectory)/
    /p:AppxPackageSigningEnabled=false
    /p:PackageCertificateThumbprint="444EAE8EF9A571539D03E3A37D76A780F504171B" 
    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"
    /p:PackageCertificatePassword="$(secret)"'

  displayName: 'Package the App'

# sign package
- task: DownloadSecureFile@1
  name: signingCert
  inputs:
    secureFile: '$(certificateName)'
  displayName: 'Download Secure PFX File'

# - script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool" sign /fd SHA256 /f $(signingCert.secureFilePath) /p $(secret) $(Build.ArtifactStagingDirectory)/MSIXPackage.msix'
#   displayName: 'Sign MSIX Package'

#copy app packages content
- task: CopyFiles@2
  displayName: 'Copy Files to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
